# -*- coding: utf-8 -*-

"""
ccluster_profiles.pyx -- Fast computation and manipulation of cluster profiles.
"""

# This software is distributed under the FreeBSD License.
# See the accompanying file LICENSE for details.
# 
# Copyright 2011 Benjamin Hepp

from __future__ import division

import numpy
cimport numpy
cimport cython

DTYPE_INT = numpy.int
ctypedef numpy.int_t DTYPE_INT_t
DTYPE_FLOAT = numpy.float
ctypedef numpy.float_t DTYPE_FLOAT_t
DTYPE_BOOL = numpy.int8
ctypedef numpy.int8_t DTYPE_BOOL_t

from cython.parallel import prange, parallel, threadid

from .. import distance

def compute_cluster_profiles(tuple masks not None,
                             numpy.ndarray points not None,
                             numpy.ndarray clusters not None,
                             float exp_factor=10.0, int minkowski_p=2):
    assert points.dtype == DTYPE_FLOAT
    assert clusters.dtype == DTYPE_FLOAT
    cdef numpy.ndarray clusterProfiles
    cdef numpy.ndarray p
    cdef numpy.ndarray mask
    cdef numpy.ndarray[DTYPE_BOOL_t, ndim=2] new_masks
    if exp_factor < 0.0:
        return __compute_cluster_profiles(
                    masks, points, clusters, minkowski_p)
    else:
        new_masks = numpy.zeros((len(masks), masks[0].shape[0]), dtype=DTYPE_BOOL)
        for i, mask in enumerate(masks):
            new_masks[i, :] = mask[:]
        return __compute_all_cluster_profiles(
            new_masks, points, clusters, exp_factor, minkowski_p)
        #clusterProfiles = numpy.zeros((len(masks), clusters.shape[0]))
        #for i in xrange(len(masks)):
        ##length = len(masks)
        ##for i in prange(length, nogil=True):
            #mask = masks[i]
            #p = points[mask]
            #clusterProfiles[i] = __compute_cluster_profile(
                #p, clusters, exp_factor, minkowski_p)
        #return clusterProfiles


@cython.cdivision(True)
@cython.boundscheck(False)
def __compute_cluster_profiles_sub(int npoints, int nclusters, int nmasks,
                                   numpy.ndarray[DTYPE_BOOL_t, ndim=2] masks,
                                   numpy.ndarray[DTYPE_FLOAT_t, ndim=2] clusterProfiles,
                                   numpy.ndarray[DTYPE_FLOAT_t, ndim=2] dist_m,
                                   numpy.ndarray[DTYPE_FLOAT_t, ndim=2] sim_m,
                                   float exp_factor):
    if not clusterProfiles.flags.c_contiguous:
        raise ValueError('clusterProfiles must be a C contiguous array')
    if not dist_m.flags.c_contiguous:
        raise ValueError('dist_m must be a C contiguous array')
    if not sim_m.flags.c_contiguous:
        raise ValueError('sim_m must be a C contiguous array')
    #if not bmasks.flags.c_contiguous:
        #raise ValueError('bmasks must be a C contiguous array')

    #print bmasks[0]
    #print bmasks[1]
    #cdef numpy.ndarray[DTYPE_INT_t, ndim=2] masks
    #masks = numpy.array(bmasks, dtype=DTYPE_INT)
    #print masks[0]
    #print masks[1]

    if not masks.flags.c_contiguous:
        raise ValueError('masks must be a C contiguous array')

    cdef DTYPE_BOOL_t *pdata_masks = <DTYPE_BOOL_t*>masks.data
    cdef DTYPE_FLOAT_t *pdata_dist_m = <DTYPE_FLOAT_t*>dist_m.data
    cdef DTYPE_FLOAT_t *pdata_sim_m = <DTYPE_FLOAT_t*>sim_m.data
    cdef DTYPE_FLOAT_t *pdata_clusterProfiles = <DTYPE_FLOAT_t*>clusterProfiles.data
    #cdef numpy.ndarray[DTYPE_BOOL_t, ndim=1] mask
    #cdef numpy.ndarray[DTYPE_BOOL_t, ndim=2] inf_mask
    #cdef numpy.ndarray[DTYPE_BOOL_t, ndim=1] col_inf_mask
    cdef DTYPE_FLOAT_t v_max
    cdef DTYPE_FLOAT_t v
    cdef DTYPE_FLOAT_t v_sum
    cdef int i, j, k, l

    cdef numpy.ndarray[DTYPE_BOOL_t, ndim=1] zero_dist_mask
    cdef numpy.ndarray zero_dist_mask_b
    zero_dist_mask_b = dist_m == 0.0
    zero_dist_mask_b = numpy.any(zero_dist_mask_b, axis=0)
    zero_dist_mask = numpy.array(zero_dist_mask_b, dtype=DTYPE_BOOL)
    cdef DTYPE_BOOL_t *pdata_zero_dist_mask = <DTYPE_BOOL_t*>zero_dist_mask.data
    cdef int found_zero

    #print 'dist_m:', dist_m

    #print 'zero_dist_mask_b:', zero_dist_mask_b
    #print 'zero_dist_mask:', zero_dist_mask

    #print 'q>'
    #print 'sim_m[0]:', sim_m[:, bmasks[0]]
    #print 'sim_m[1]:', sim_m[:, bmasks[1]]

    #for i in xrange(nmasks):
    for i in prange(nmasks, nogil=True):

        #mask = masks[i]

        #inf_mask = numpy.isinf(sim_m)
        #col_inf_mask = numpy.any(inf_mask, axis=0)

        #sim_m[:, col_inf_mask] = 0.0
        #sim_m[inf_mask] = 1.0

        #for j in xrange(npoints):
            ##print 'i={}, j={}, mask={}'.format(i, j, pdata_masks[i*npoints + j])
            #if pdata_masks[i*npoints + j]:
                #for k in xrange(nclusters):
                    #print '  i={}, j={}, k={}, v={}'.format(i, j, k, pdata_dist_m[k*npoints + j])
                    #if pdata_dist_m[k*npoints + j] == 0.0:
                        #print 'found zero at j={}, i={}, k={}'.format(j, i, k)
                        #for l in xrange(nclusters):
                            #pdata_sim_m[l*npoints + j] = 0.0
                        #pdata_sim_m[k*npoints + j] = 1.0
                        #break

        for j in xrange(npoints):
            #print 'i={}, j={}, mask={}'.format(i, j, pdata_masks[i*npoints + j])
            if pdata_masks[i*npoints + j]:
                found_zero = 0
                for k in xrange(nclusters):
                    #print '  i={}, j={}, k={}, v={}'.format(i, j, k, pdata_dist_m[k*npoints + j])
                    if pdata_dist_m[k*npoints + j] == 0.0:
                        found_zero = 1
                        break
                        #print 'found zero at j={}, i={}, k={}'.format(j, i, k)
                if found_zero:
                    for k in xrange(nclusters):
                        if pdata_dist_m[k*npoints + j] == 0.0:
                            pdata_sim_m[k*npoints + j] = 1.0
                        else:
                            pdata_sim_m[k*npoints + j] = 0.0

        #print 'sum(sim_m):', numpy.sum(sim_m)

    #print 'a>'
    #print 'sim_m[0]:', sim_m[:, bmasks[0]]
    #print 'sim_m[1]:', sim_m[:, bmasks[1]]

    #for i in xrange(nmasks):
    for i in prange(nmasks, nogil=True):

        if exp_factor > 0:

            #sim_m = sim_m / numpy.max(sim_m)
            v_max = 0.0
            for j in xrange(npoints):
                if pdata_masks[i*npoints + j]:
                    for k in xrange(nclusters):
                        v = pdata_sim_m[k*npoints + j]
                        if v > v_max:
                            v_max = v
            if v_max > 0.0:
                #sim_m = sim_m / v_max
                for j in xrange(npoints):
                    if pdata_masks[i*npoints + j]:
                        for k in xrange(nclusters):
                            v = pdata_sim_m[k*npoints + j]
                            pdata_sim_m[k*npoints + j] = v / v_max

    #print 'b>'
    #print 'sim_m[0]:', sim_m[:, bmasks[0]]
    #print 'sim_m[1]:', sim_m[:, bmasks[1]]

    if exp_factor > 0:

        #print '<2>'
        sim_m = (numpy.exp(exp_factor * sim_m) - 1) / (numpy.exp(exp_factor) - 1)
        #print '</2>'

    #print 'c>'
    #print 'sim_m[0]:', sim_m[:, bmasks[0]]
    #print 'sim_m[1]:', sim_m[:, bmasks[1]]

    pdata_sim_m = <DTYPE_FLOAT_t*>sim_m.data

    #for i in xrange(nmasks):
    #for i in prange(nmasks, nogil=True):

    # normalize the similarity matrix
    #sim_m = sim_m / numpy.sum(sim_m, axis=0)
    #for j in xrange(npoints):
    for j in prange(npoints, nogil=True):
        v_sum = 0.0
        #if pdata_masks[i*npoints + j]:
        for k in xrange(nclusters):
                #print 'j={}, k={}, v={}'.format(j, k, pdata_sim_m[k*npoints + j])
                v = pdata_sim_m[k*npoints + j]
                v_sum = v_sum + v
        #print 'j={}, v_sum={}'.format(j, v_sum)
        if v_sum > 0.0:
            for k in xrange(nclusters):
                #if pdata_masks[i*npoints + j]:
                    v = pdata_sim_m[k*npoints + j]
                    pdata_sim_m[k*npoints + j] = v / v_sum

    #print 'd>'
    #print 'sim_m[0]:', sim_m[:, bmasks[0]]
    #print 'sim_m[1]:', sim_m[:, bmasks[1]]

    #for i in xrange(nmasks):
    for i in prange(nmasks, nogil=True):

        #clusterProfiles[i] = numpy.sum(sim_m, axis=1)
        for k in xrange(nclusters):
            v_sum = 0.0
            for j in xrange(npoints):
                if pdata_masks[i*npoints + j]:
                    v = pdata_sim_m[k*npoints + j]
                    v_sum = v_sum + v
            pdata_clusterProfiles[i*nclusters + k] = v_sum

        #print 'sum(profile):', numpy.sum(profile), 'sum(sim_m):', numpy.sum(sim_m), 'points.shape[0]:', points.shape[0]


def __compute_all_cluster_profiles(numpy.ndarray[DTYPE_BOOL_t, ndim=2] masks,
                                   numpy.ndarray[DTYPE_FLOAT_t, ndim=2] points,
                                   numpy.ndarray[DTYPE_FLOAT_t, ndim=2] clusters,
                                   float exp_factor, int minkowski_p=2):

    cdef numpy.ndarray[DTYPE_FLOAT_t, ndim=2] clusterProfiles
    clusterProfiles = numpy.zeros((masks.shape[0], clusters.shape[0]))

    # calculate the distance of all the samples to the k-th cluster centroid.
    # rows represent clusters, columns represent samples
    cdef numpy.ndarray[DTYPE_FLOAT_t, ndim=2] dist_m
    dist_m = distance.minkowski_cdist(clusters, points, minkowski_p)

    #print 'mask0:', masks[0]
    #print 'mask1:', masks[1]

    #print 'dist_m[0]:', dist_m[0]
    #print 'dist_m:', dist_m[:, masks[0]]
    #print 'dist_m:', dist_m[:, masks[1]]

    #print 'dist_m:', dist_m[:, 0]

    cdef numpy.ndarray[DTYPE_FLOAT_t, ndim=2] sim_m

    #print '<1>'
    sim_m = 1.0 / dist_m
    m = numpy.invert(numpy.isfinite(sim_m))
    sim_m[m] = -1.0
    #print '</1>'

    #print 'sim_m:', sim_m[:, masks[0]]
    #print 'sim_m:', sim_m[:, masks[1]]

    cdef int npoints = points.shape[0]
    cdef int nclusters = clusters.shape[0]
    cdef int nmasks = masks.shape[0]

    __compute_cluster_profiles_sub(
        npoints, nclusters, nmasks,
        masks,
        clusterProfiles,
        dist_m,
        sim_m,
        exp_factor
    )

    #print 'sim_m:', sim_m[: , 0]

    return clusterProfiles


# New variant as documented in the thesis
def __compute_cluster_profiles(masks, points, clusters, minkowski_p):
    cluster_profiles = numpy.zeros((len(masks), clusters.shape[0]))
    # calculate the distance of all pairs of cluster centroids ...
    cluster_dist_m = distance.minkowski_cdist(
            clusters, clusters, minkowski_p)
    # ... and find the minimum
    min_cluster_dist = numpy.min(cluster_dist_m[numpy.invert(
            numpy.identity(cluster_dist_m.shape[0], dtype=bool)
   )])
    # Calculate the distance of all the samples to the k-th cluster
    # centroid. Rows represent samples, columns represent clusters.
    dist_m = distance.minkowski_cdist(points, clusters, minkowski_p)
    # Compute cluster profile for each point and normalize it.
    profiles = numpy.exp(-dist_m/min_cluster_dist)
    profiles = profiles / numpy.sum(profiles, axis=1)[:,numpy.newaxis]
    # Compute the mean cluster profile for each set of points.
    for i in xrange(len(masks)):
        mask = masks[i]
        p = points[mask]
        cluster_profiles[i] = numpy.sum(profiles[mask], axis=0) / numpy.sum(mask)
    return cluster_profiles


def compute_cluster_similarity_matrix(clusters, minkowski_p=2.0):

    #dist_m = distance.minkowski_cdist(clusters, clusters, minkowski_p)
    #sim_m = numpy.exp(-dist_m)
    #return sim_m
    """max_dist = numpy.max(dist)
    if max_dist > 0.0:
        sim = 1.0 - dist / max_dist
    else:
        sim = 1.0 - dist
    return sim"""
    """sim = 1.0 / dist
    finite_mask = numpy.isfinite(sim)
    max_sim = numpy.max(sim[finite_mask])
    sim /= max_sim
    sim[numpy.invert(finite_mask)] = 1.0
    return sim"""
    cluster_dist_m = distance.minkowski_cdist(clusters, clusters, minkowski_p)
    min_cluster_dist = numpy.min(cluster_dist_m[
            numpy.invert(numpy.identity(cluster_dist_m.shape[0], dtype=bool))
   ])
    sim = numpy.exp(-cluster_dist_m/min_cluster_dist)
    return sim

def compute_treatment_similarity_map(distanceMap, profile_metric):

    if profile_metric == 'summed_minmax':
        return 1.0 - distanceMap
    elif profile_metric == 'l2_norm' or profile_metric == 'chi2_norm' or profile_metric == 'l1_norm' or profile_metric == 'chi1_norm' or profile_metric == 'quadratic_chi':
        masked_map = distanceMap[numpy.isfinite(distanceMap)]
        if masked_map.shape[0] == 0:
            return distanceMap
        else:
            max_v = numpy.max(masked_map)
            #print 'max_v:', max_v
            #print 'distanceMap/max_v:', (distanceMap / max_v)
            if max_v > 0.0:
                return 1.0 - distanceMap / max_v
            else:
                return 1.0 - distanceMap
    else:
        raise Exception('No such profile metric: %s' % profile_metric)


def compute_treatment_distance_map(clusterProfiles, profile_metric, profile_threshold=0.0, binSimilarityMatrix=None, normalizationFactor=0.5):

    profileHeatmap = numpy.zeros((clusterProfiles.shape[0], clusterProfiles.shape[0]))
    profileHeatmap[numpy.identity(profileHeatmap.shape[0], dtype=bool)] = 0.0

    for i in xrange(clusterProfiles.shape[0]):

        profile1 = clusterProfiles[i]
        norm_profile1 = profile1 / float(numpy.sum(profile1))

        print 'profile #{} out of {}'.format(i + 1, clusterProfiles.shape[0])
        print 'norm_profile1:', norm_profile1

        if profile_threshold > 0.0:
            max = numpy.max(profile1)
            threshold_mask = profile1 < max * profile_threshold
            norm_profile1[threshold_mask] = 0.0
            norm_profile1 = norm_profile1 / float(numpy.sum(norm_profile1))

        for j in xrange(i):

            profile2 = clusterProfiles[j]
            norm_profile2 = profile2 / float(numpy.sum(profile2))

            if profile_threshold > 0.0:
                max = numpy.max(profile2)
                threshold_mask = profile2 < max * profile_threshold
                norm_profile2[threshold_mask] = 0.0
                norm_profile2 = norm_profile2 / float(numpy.sum(norm_profile2))

            if profile_metric == 'summed_minmax':

                min_match = numpy.sum(numpy.min([norm_profile1, norm_profile2], axis=0)**2)
                max_match = numpy.sum(numpy.max([norm_profile1, norm_profile2], axis=0)**2)

                match = min_match / max_match

                dist = 1.0 - match

            elif profile_metric == 'l2_norm':

                # L2-norm
                dist = numpy.sqrt(numpy.sum((norm_profile1 - norm_profile2)**2))

            elif profile_metric == 'l1_norm':

                # L1-norm
                dist = numpy.sum(numpy.abs(norm_profile1 - norm_profile2))

            elif profile_metric == 'chi1_norm':

                # Chi1
                dist =  numpy.abs(norm_profile1 - norm_profile2) / (norm_profile1 + norm_profile2)
                dist[numpy.logical_and(norm_profile1 == 0, norm_profile2 == 0)] = 0.0

                dist = numpy.sum(dist)

            elif profile_metric == 'chi2_norm':

                # chi-square
                dist =  (norm_profile1 - norm_profile2) ** 2 / (norm_profile1 + norm_profile2)
                dist[numpy.logical_and(norm_profile1 == 0, norm_profile2 == 0)] = 0.0

                dist = numpy.sum(dist)

            elif profile_metric == 'quadratic_chi':

                # quadratic-chi
                A = binSimilarityMatrix
                #A = numpy.identity(norm_profile1.shape[0])
                m = normalizationFactor

                P = norm_profile1
                Q = norm_profile2

                """
                This variant is adapted from the MatLab sources on
                http://www.cs.huji.ac.il/~ofirpele/QC/code/

                Z = numpy.dot((P+Q), A)
                Z[Z==0] = 1.0
                Z = Z ** m
                D = (P-Q) / Z
                #E = D*A*D
                E = numpy.dot(numpy.dot(D, A), D)
                dist = numpy.max([E, numpy.zeros(E.shape)], axis=0)"""

                D = numpy.empty((P.shape[0],))
                for k in xrange(P.shape[0]):
                    D[k] = 0.0
                    for c in xrange(P.shape[0]):
                        D[k] += ((P[c] + Q[c]) * A[c,k]) ** m
                N = numpy.empty((P.shape[0],))
                for k in xrange(P.shape[0]):
                    N[k] = P[k] - Q[k]
                zero_mask = D == 0.0
                D[zero_mask] = 1.0
                N[zero_mask] = 0.0
                M = 0.0
                for k in xrange(N.shape[0]):
                    for l in xrange(N.shape[0]):
                        M += (N[k] / D[k]) * (N[l] / D[l]) * A[k,l]
                dist = M

            elif profile_metric == 'summed_difference':

                P = norm_profile1
                Q = norm_profile2
                D = (P - Q)
                dist = numpy.sum(numpy.abs(D))

            else:
                raise Exception('No such profile metric: %s' % profile_metric)

            profileHeatmap[i, j] = dist
            profileHeatmap[j, i] = dist

    return profileHeatmap
